# docker-compose.yml

version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fraud_detection_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - fraud_network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fraud_detection_backend
    ports:
      - "8000:8000"
    environment:
      - ENV=development
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - logs:/app/logs
    depends_on:
      - redis
    networks:
      - fraud_network
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fraud_detection_celery_worker
    environment:
      - ENV=development
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - logs:/app/logs
    depends_on:
      - redis
      - backend
    networks:
      - fraud_network
    command: celery -A src.infrastructure.tasks.celery_app worker --loglevel=info

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fraud_detection_celery_beat
    environment:
      - ENV=development
      - REDIS_HOST=redis
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - .env
    volumes:
      - ./backend:/app
      - logs:/app/logs
    depends_on:
      - redis
      - backend
    networks:
      - fraud_network
    command: celery -A src.infrastructure.tasks.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    image: mher/flower:latest
    container_name: fraud_detection_flower
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - FLOWER_PORT=5555
    depends_on:
      - redis
      - celery_worker
    networks:
      - fraud_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fraud_detection_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - fraud_network
    command: npm start

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: fraud_detection_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - fraud_network

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: fraud_detection_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fraud_network

networks:
  fraud_network:
    driver: bridge

volumes:
  redis_data:
  logs:
  prometheus_data:
  grafana_data: